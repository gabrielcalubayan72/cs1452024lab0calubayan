from sys import stderr
from cs145lib.task0 import Channel, node_main

#huffman coding generated by pasting corpus in https://planetcalc.com/8087/

huffmanOfCorpus = {
    'a' : "1011",
    'b' : "011111",
    'c' : "11110",
    'd' : "11000",
    'e' : "001",
    'f' : "000110",
    'g' : "00010",
    'h' : "110011",
    'i' : "1110",
    'j' : "000111001",
    'k' : "0001111",
    'l' : "11111",
    'm' : "00000",
    'n' : "1001",
    'o' : "0110",
    'p' : "00001",
    'q' : "000111010",
    'r' : "1010",
    's' : "1101",
    't' : "1000",
    'u' : "01110",
    'v' : "1100101",
    'w' : "1100100",
    'x' : "000111011",
    'y' : "011110",
    'z' : "0001110001",
    ' ' : "111111",
    '.' : "1111111",
    '-' : "11111111"
}

huffmanOfCorpus_swapped = {value: key for key, value in huffmanOfCorpus.items()}


def huffmanEncoder(sentence : str):
    bitstreamToSend = []
    for char in sentence:
        bitstreamToSend.append(huffmanOfCorpus[char])
    return bitstreamToSend

def sender(channel: Channel, sentence: str) -> None:
    # binaryLetters = ''.join(format(ord(i), '08b') for i in sentence)
    binaryLetters = huffmanEncoder(sentence.lower())
    print(binaryLetters, file=stderr)
    for char in binaryLetters:
        for bit in char:
            channel.send(int(bit))
    return

def receiver(channel: Channel) -> str:
    sentence = ""
    currentChar = ""

    while True:
        currentChar += str(channel.get())

        if currentChar in huffmanOfCorpus.values():
            sentence += huffmanOfCorpus_swapped[currentChar]
            currentChar = ""

        elif currentChar == huffmanOfCorpus["."]: 
            sentence += "."
            break
    
    return sentence.capitalize()

if __name__ == '__main__':
    node_main(sender=sender, receiver=receiver)

# def receiver(channel: Channel) -> str:
#     sentence = ""
#     currentChar = ""

#     while True:
#         currentChar += str(channel.get())

#         if currentChar in huffmanOfCorpus.values():
#             sentence += huffmanOfCorpus_swapped[currentChar]
#             currentChar = ""

#         elif currentChar == huffmanOfCorpus["."]: 
#             sentence += "."
#             break

#     return sentence


# huffmanOfCorpus = {
#     'a' : 0b1011,
#     'b' : 0b011111,
#     'c' : 0b11110,
#     'd' : 0b11000,
#     'e' : 0b001,
#     'f' : 0b000110,
#     'g' : 0b00010,
#     'h' : 0b110011,
#     'i' : 0b1110,
#     'j' : 0b000111001,
#     'k' : 0b0001111,
#     'l' : 0b11111,
#     'm' : 0b00000,
#     'n' : 0b1001,
#     'o' : 0b0110,
#     'p' : 0b00001,
#     'q' : 0b000111010,
#     'r' : 0b1010,
#     's' : 0b1101,
#     't' : 0b1000,
#     'u' : 0b01110,
#     'v' : 0b1100101,
#     'w' : 0b1100100,
#     'x' : 0b000111011,
#     'y' : 0b011110,
#     'z' : 0b0001110001,
#     ' ' : 0b111111,
#     '.' : 0b1111111,
#     '-' : 0b11111111
# }
    # while True:
    #     zeroCheck = 0
    #     gotten2 = channel.get()
    #     bitstream.append(gotten2)
    #     # print("hello", file=stderr)
    #     if gotten2 == 0:
    #         zeroCheck += 1
    #     else:
    #         zeroCheck = 0

    #     if (zeroCheck == 5): # largest trail of zeroes in a single character is 6
    #         break

    # print(bitstream, file=stderr)

    #     i = 0
    #     while i < len(bitstream) and bitstream[i] == '0': # Remove any prepended zeroes
    #         i += 1
    #         i -= 1
    #         bitstream = bitstream[i:] # since every ascii alphabet character starts with 0

    # for bit in bitstream:
    #     if len(currentLetter) == 8:
    #         sentence += chr(int(currentLetter, 2))
    #     else:
    #         currentLetter += bit # Concatenate bit to currentLetter
